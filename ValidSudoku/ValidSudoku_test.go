package validSudoku

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test(t *testing.T) {
	testTable := []struct {
		name  string
		board [][]byte
		want  bool
	}{
		{
			name: "Example 1",
			board: strs2board([][]string{
				{"5", "3", ".", ".", "7", ".", ".", ".", "."},
				{"6", ".", ".", "1", "9", "5", ".", ".", "."},
				{".", "9", "8", ".", ".", ".", ".", "6", "."},
				{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
				{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
				{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
				{".", "6", ".", ".", ".", ".", "2", "8", "."},
				{".", ".", ".", "4", "1", "9", ".", ".", "5"},
				{".", ".", ".", ".", "8", ".", ".", "7", "9"},
			}),
			want: true,
		},
		{
			name: "Example 2",
			board: strs2board([][]string{
				{"8", "3", ".", ".", "7", ".", ".", ".", "."},
				{"6", ".", ".", "1", "9", "5", ".", ".", "."},
				{".", "9", "8", ".", ".", ".", ".", "6", "."},
				{"8", ".", ".", ".", "6", ".", ".", ".", "3"},
				{"4", ".", ".", "8", ".", "3", ".", ".", "1"},
				{"7", ".", ".", ".", "2", ".", ".", ".", "6"},
				{".", "6", ".", ".", ".", ".", "2", "8", "."},
				{".", ".", ".", "4", "1", "9", ".", ".", "5"},
				{".", ".", ".", ".", "8", ".", ".", "7", "9"},
			}),
			want: false,
		},
		{
			name: "Example 3",
			board: strs2board([][]string{
				{".", ".", ".", ".", "5", ".", ".", "1", "."},
				{".", "4", ".", "3", ".", ".", ".", ".", "."},
				{".", ".", ".", ".", ".", "3", ".", ".", "1"},
				{"8", ".", ".", ".", ".", ".", ".", "2", "."},
				{".", ".", "2", ".", "7", ".", ".", ".", "."},
				{".", "1", "5", ".", ".", ".", ".", ".", "."},
				{".", ".", ".", ".", ".", "2", ".", ".", "."},
				{".", "2", ".", "9", ".", ".", ".", ".", "."},
				{".", ".", "4", ".", ".", ".", ".", ".", "."},
			}),
			want: false,
		},
	}

	for _, testCase := range testTable {
		t.Run(testCase.name, func(t *testing.T) {
			assert.Equal(t, isValidSudoku(testCase.board), testCase.want)
		})
	}
}

func strs2board(strs [][]string) [][]byte {
	board := make([][]byte, len(strs))

	for i, str := range strs {
		for _, ch := range str {
			if ch == "." {
				board[i] = append(board[i], '.')
			} else {
				board[i] = append(board[i], ch[0]-'0')
			}
		}
	}

	return board
}
